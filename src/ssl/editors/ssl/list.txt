callstart
exec(script_name:string);
spawn(script_name:string);
fork
detach
startcritical
endcritical
sayquit
sayend
saystart
saystartpos
sayreplytitle
saygotoreply
sayreply(p1:number,p2:number);
sayoption(p1:number,p2:number);
saymessage(p1:number,p2:number);
sayreplywindow
sayoptionwindow
sayborder
sayscrollup
sayscrolldown
sayspacing
sayoptioncolor
sayreplycolor
sayrestart
saygetlastpos
sayreplyflags
sayoptionflags
saymessagetimeout(time:number);
createwin(name:string,X:number,Y:number,Width:number,heigth:number);
deletewin(name:string);
selectwin(name:string);
resizewin(name:string,X:number,Y:number,Width:number,heigth:number);
scalewin(name:string,X:number,Y:number,Width:number,heigth:number);
showwin;
fillwin
fillrect
fillwin3x3
display(filename:string);
displaygfx(filename:string,X:number,Y:number,Width:number,heigth:number););
displayraw(filename:string);
loadpalettetable(palette_file:string);
fadein(Time:number);
fadeout(Time:number);
gotoxy
print
format
printrect
setfont
settextflags
settextcolor
sethighlightcolor
stopmovie
playmovie
movieflags
playmovierect
playmoviealpharect
addregionflag
addregionproc
addregionrightproc
deleteregion
activateregion
checkregion
addbutton(button_name:string,posx:number,posy:number,widht:number,height:number);
addbuttontext(button_name:string,text:string);
addbuttonflag
addbuttongfx
addbuttonproc(name:string,press:function,no_press:function,enter:function,exit:function);
addbuttonrightproc <-- (this function is disabled)
deletebutton(button_name:string);
hidemouse
showmouse
mouseshape
refreshmouse
setglobalmousefunc
addnamedevent
addnamedhandler
clearnamed
signalnamed
addkey
deletekey
soundplay
soundpause
soundresume
soundstop
soundrewind
sounddelete
setoneoptpause
selectfilelist
give_exp_points(count:EXP);
scr_return(val:number);
play_sfx(num:number);
obj_name(obj:pointer);
sfx_build_open_name(open:number);
get_pc_stat(stat:pcstat);
tile_contains_pid_obj(xy:number,elevation:elevationid,objectid:PID);
set_map_start(X:number,Y:number,elevation:elevationid,rotation:directionid);
obj_move_to_tile(param1,param2,param3,param4);
has_skill(who:pointer,skill:skillID);
using_skill(who:pointer,skill:skillID);
roll_vs_skill(who:pointer,skill:skillID,modifier:number);
skill_contest;
do_check(critterID:pointer,stat:statID,modifier:number);
is_success(val:number);
is_critical(val:number);
how_much(val:number);
mark_area_known(mark_type:mark_typeID,area:areaID,area_state:map_stateID);
reaction_influence;
random(from:number,to:number);
roll_dice;
move_to(obj:pointer,xy:number,elevation:elevationid);
create_object_sid(pid:PID,tile_num:number,elevation:elevationid,sid:scriptID);
display_msg(msg:string);
script_overrides
obj_is_carrying_obj_pid(Obj:pointer,pid:PID);
tile_contains_obj_pid(xy:number,elevation:elevationid,objectid:PID);
self_obj;
source_obj;
target_obj;
dude_obj;
obj_being_used_with;
local_var(var_num:locvarID);
set_local_var(var_num:locvarID,val:number);
map_var(map_var_num:mapvarID);
set_map_var(map_var_num:mapvarID,val:number);
global_var(global_var_num:globalID);
set_global_var(global_var_num:globalID,val:state);
script_action;
obj_type(obj:pointer);
obj_item_subtype(obj:pointer);
get_critter_stat(obj:pointer,stat:statID);
set_critter_stat(obj:pointer,stat:statID,count:number);
animate_stand_obj(CritterAddr:pointer);
animate_stand_reverse_obj(CritterAddr:pointer);
animate_move_obj_to_tile(critterID:pointer,new_coord:number,method:animpar);
tile_in_tile_rect(point1:number,point2:number,point3:number,point4:number,pointX:number);
attack(Obj:pointer);
attack_complex(who:pointer,called_shot:number,num_attacks:number,bonus:number,min_damage:number,max_damage:number,attacker_results:number,target_results:number);
tile_distance(tile1:number,tile2:number);
tile_distance_objs(critterID:pointer,critterID:pointer);
tile_num(obj:pointer);
tile_num_in_direction(start_tile:number,dir:directionid,distance:number);
pickup_obj(ItemAddr:pointer);
drop_obj(ItemAddr:pointer);
add_obj_to_inven(who:pointer,item:pointer);
rm_obj_from_inven(who:pointer,item:pointer);
wield_obj_critter(critterID:pointer,item_addr:pointer);
use_obj(Obj:pointer);
obj_can_see_obj(who:pointer,whom:pointer);
start_gdialog(scr:scriptid,obj:pointer,mood:number,headNum:headID,backgroundIdx:bcgID);
end_dialogue;
dialog_reaction;
metarule3(Obj:pointer,p1:number,p2:number,zero1:number);
set_map_music(map_id:mapID,music_name:string);
set_obj_visibility(obj:pointer,mode:visibilityid);
load_map(map_name:mapID,start_location:number);
wm_area_set_pos(area:areaID,X:number,Y:number);
set_exit_grids(Startelevation:number,destmapid:mapID,elevation:elevationid,tile:number,rotation:directionid);
anim_busy(CritterAddr:pointer);
critter_heal(CritterAddr:pointer,HitNumber:number);
set_light_level(light_val:lightid);
game_time;
elevation(object_addr:pointer);
kill_critter(CritterAddr:pointer,death_frame:animpar);
kill_critter_type(type:PID,param:killID);
critter_dmg(CritterAddr:pointer,hit_number:number,hit_type:dmgID);
add_timer_event(CritterAddr:pointer,period:number,fix_param:number);
rm_timer_event(obj:pointer);
game_ticks(time:seconds);
has_trait(type:trait_type,adress:pointer,traitindex:traitparam);
destroy_object(Obj:pointer);
obj_can_hear_obj(who:pointer,whom:pointer);
game_time_hour;
fixed_param;
tile_is_visible(tile:number);
dialogue_system_enter;
action_being_used;
critter_state(critterid:pointer);
game_time_advance(time:number);
radiation_inc(who:pointer,val:number);
radiation_dec(who:pointer,val:number);
critter_attempt_placement(who:pointer,hex:number,elevation:elevationid);
override_map_start(X:number,Y:number,elevation:elevationid,rotation:directionid);
obj_pid(ObjAddr:pointer);
cur_map_index;
critter_add_trait(obj:pointer,type:trait_type,trait:traitparam,val:traitparam);
critter_rm_trait(obj:pointer,type:trait_type,trait:traitparam,val:traitparam);
proto_data(obj_id:pointer,stat:protoID);
message_str(scrnum:scriptID,strnum:number);
critter_inven_obj(obj_id:pointer,slots:number);
obj_set_light_level(CritterAddr:pointer,power:number,radius:number);
inven_cmds(critterID:pointer,Dh:number,count:number);
float_msg(critterID:pointer,str:string,color:colorID);
metarule(parm1:number,parm2:number);
anim(CritterAddr:pointer,anim:animpar,par1:number);
obj_carrying_pid_obj(critterID:pointer,ObjPid:PID);
reg_anim_func(type:animtype,CritterAddr:pointer);
reg_anim_animate(CritterAddr:pointer,anim:animpar,param2:number);
reg_anim_animate_reverse(what:pointer,anim:animpar,delay:number);
reg_anim_obj_move_to_obj(who:pointer,dest_obj:number,delay:number);
reg_anim_obj_run_to_obj(who:pointer,dest_obj:number,delay:number);
reg_anim_obj_move_to_tile(who:pointer,dest_tile:number,delay:number);
reg_anim_obj_run_to_tile(who:pointer,dest_tile:number,delay:number);
play_gmovie(movie:number);
add_mult_objs_to_inven(who:pointer,item:itempointer,count:number);
rm_mult_objs_from_inven(CritterID:pointer,Item:itempointer,count:number);
get_month;
get_day;
explosion(where:number,elevation:number,range:number);
gsay_start;
gsay_end;
mstr(str:localmsgid);
floater(str:localmsgid);
floater_rand(str_from:localmsgid,str_to:localmsgid);
Reply(str:localmsgid);
gSay_Reply(scrnum:scriptid,str:number);
gSay_Option(msg_list:scriptid,msg_number:number,func:function,reaction:reactionid);
gSay_Message(scrnum:scriptid,str:number,reaction:reactionid);
giQ_Option(int_test:number,scrnum:scriptid,str:number,func:function,reaction:reactionid);
GOption(str:localmsgid,func:function,int_test:number);
NOption(str:localmsgid,func:function,int_test:number);
BOption(str:localmsgid,func:function,int_test:number);
GLowOption(str:localmsgid,func:function);
NLowOption(str:localmsgid,func:function);
BLowOption(str:localmsgid,func:function);
poison(who:pointer,val:number);
get_poison(who:pointer,val:number);
party_add(whom:pointer);
party_remove(whom:pointer);
reg_anim_animate_forever(what:pointer,anim:animpar,delay:number);
critter_injure(CritterAddr:pointer,injure_type:injureID);
combat_is_initialized;
gdialog_mod_barter(count:number);
difficulty_level;
running_burning_guy;
obj_is_locked(door_obj:pointer);
obj_lock(door_obj:pointer);
obj_unlock(door_obj:pointer);
obj_is_open(door_obj:pointer);
obj_open(door_obj:pointer);
obj_close(door_obj:pointer);
game_ui_disable;
game_ui_enable;
gfade_out(time:number);
gfade_in(time:number);
item_caps_total(obj:pointer);
item_caps_adjust(obj:pointer,count:number);
anim_action_frame(who:pointer,frame:number);
reg_anim_play_sfx(who:pointer,psx_name:number,delay:number);
critter_mod_skill(critterID:pointer,skill_index:skillID,count:number);
sfx_build_char_name(CritterAddr:pointer,par1:number,par2:number);
sfx_build_ambient_name(ambient:number);
sfx_build_interface_name(interface:number);
sfx_build_item_name(interface:number);
sfx_build_weapon_name(ItemAddrAddr:pointer,p1:number,CritterAddr:pointer,p2:number);
sfx_build_scenery_name(SceneryAddr:pointer,par1:number,par2:number);
attack_setup(Critter1Addr:pointer,Critter2Addr:pointer);
destroy_mult_objs(item:pointer,count:number);
use_obj_on_obj(item_obj:pointer,crit_obj:pointer);
endgame_movie;
move_obj_inven_to_obj(CritterAddr:pointer,Obj:pointer);
obj_art_fid(obj:pointer);
art_anim(Fid:FID);
party_member_obj(critterid:pointer);
rotation_to_tile(tilenum1:number,tilenum2:number);
jam_lock(door_obj:pointer);
gdialog_mod_barter(val:number);
combat_difficulty;
obj_on_screen(What:pointer);
critter_is_fleeing(CritterAddr:pointer);
critter_set_flee_state(CritterAddr:pointer,FleeState:fleestateid);
terminate_combat;
critter_stop_attacking(Critter:pointer);
debug_msg(msg:string);
gdialog_set_barter_mod(mod:number);
wait(time:miliseconds);
